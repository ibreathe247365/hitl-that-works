/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Audio, Image, Pdf, Video } from "@boundaryml/baml"
/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
	? { [P in keyof T]?: RecursivePartialNull<T[P]> }
	: T | null;

export interface Checked<T, CheckName extends string = string> {
	value: T;
	checks: Record<CheckName, Check>;
}

export interface Check {
	name: string;
	expr: string;
	status: "succeeded" | "failed";
}

export function all_succeeded<CheckName extends string>(
	checks: Record<CheckName, Check>,
): boolean {
	return get_checks(checks).every((check) => check.status === "succeeded");
}

export function get_checks<CheckName extends string>(
	checks: Record<CheckName, Check>,
): Check[] {
	return Object.values(checks);
}
export interface Await {
	intent: "await";
	seconds: number;
	reasoning: string;
}

export interface Calculation {
	operation: string;
	operands: number[];
	result: number;
	expression: string;
}

export interface ClarificationRequest {
	intent: "request_more_information";
	message: string;
}

export interface DoneForNow {
	intent: "done_for_now";
	message: string;
}

export interface IntentCalculate {
	intent: "calculate";
	expression: string;
	explanation: string;
}

export interface IntentCommentOnIssue {
	intent: "comment_on_issue";
	issue_number: number;
	comment: string;
}

export interface IntentCreateTicket {
	intent: "create_ticket";
	title: string;
	body: string;
	labels: string[];
}

export interface IntentLinkIssues {
	intent: "link_issues";
	source_issue: number;
	target_issue: number;
	relationship: "blocks" | "blocked_by" | "relates_to" | "duplicates";
}

export interface IntentSearchGitHub {
	intent: "search_github";
	query: string;
	type: "issues" | "prs";
	filters: string[];
}

export interface IntentUpdateGitHubIssue {
	intent: "update_github_issue";
	issue_number: number;
	title?: string | null;
	body?: string | null;
	labels?: string[] | null;
	state?: "open" | "closed" | null;
}

export interface NothingToDo {
	intent: "nothing_to_do";
	message: string;
}
