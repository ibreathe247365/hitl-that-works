/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

const fileMap = {
  
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\n// Using the new OpenAI Responses API for enhanced formatting\nclient<llm> CustomGPT5 {\n  provider openai-responses\n  options {\n    model \"gpt-5\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT5Mini {\n  provider openai-responses\n  retry_policy Exponential\n  options {\n    model \"gpt-5-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\n// Openai with chat completion\nclient<llm> CustomGPT5Chat {\n  provider openai\n  options {\n    model \"gpt-5\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\n// Latest Anthropic Claude 4 models\nclient<llm> CustomOpus4 {\n  provider anthropic\n  options {\n    model \"claude-opus-4-1-20250805\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet4 {\n  provider anthropic\n  options {\n    model \"claude-sonnet-4-20250514\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-5-haiku-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\nclient<llm> CustomGemini {\n  provider google-ai\n  options {\n    model \"gemini-2.5-flash\"\n    api_key env.GOOGLE_API_KEY\n  }\n}\n\n// Example AWS Bedrock client (uncomment to use)\n// client<llm> CustomBedrock {\n//   provider aws-bedrock\n//   options {\n//     model \"anthropic.claude-sonnet-4-20250514-v1:0\"\n//     region \"us-east-1\"\n//     // AWS credentials are auto-detected from env vars\n//   }\n// }\n\n// Example Azure OpenAI client (uncomment to use)\n// client<llm> CustomAzure {\n//   provider azure-openai\n//   options {\n//     model \"gpt-5\"\n//     api_key env.AZURE_OPENAI_API_KEY\n//     base_url \"https://MY_RESOURCE_NAME.openai.azure.com/openai/deployments/MY_DEPLOYMENT_ID\"\n//     api_version \"2024-10-01-preview\"\n//   }\n// }\n\n// Example Vertex AI client (uncomment to use)\n// client<llm> CustomVertex {\n//   provider vertex-ai\n//   options {\n//     model \"gemini-2.5-pro\"\n//     location \"us-central1\"\n//     // Uses Google Cloud Application Default Credentials\n//   }\n// }\n\n// Example Ollama client for local models (uncomment to use)\n// client<llm> CustomOllama {\n//   provider openai-generic\n//   options {\n//     base_url \"http://localhost:11434/v1\"\n//     model \"llama4\"\n//     default_role \"user\" // Most local models prefer the user role\n//     // No API key needed for local Ollama\n//   }\n// }\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT5Mini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT5Mini, CustomGPT5]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
  "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"typescript\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../src/\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.211.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
  "orchestrator.baml": "class Calculation {\n  operation string\n  operands float[]\n  result float\n  expression string\n}\n\nclass IntentCalculate {\n  intent \"calculate\"\n  expression string\n  explanation string\n}\n\nclass ClarificationRequest {\n  intent \"request_more_information\"\n  message string\n}\n\nclass DoneForNow {\n  intent \"done_for_now\"\n  message string\n}\n\nclass NothingToDo {\n  intent \"nothing_to_do\"\n  message string\n}\n\nclass Await {\n  intent \"await\"\n  seconds int\n  reasoning string\n}\n\nfunction DetermineNextStep(thread: string) -> ClarificationRequest | DoneForNow | IntentCalculate | NothingToDo | Await {\n  client CustomGemini\n  prompt #\"\n    You are a helpful calculator agent that can perform mathematical calculations via email.\n    \n    Your capabilities:\n    - Perform basic arithmetic (addition, subtraction, multiplication, division)\n    - Calculate powers and square roots\n    - Evaluate mathematical expressions\n    - Ask for clarification when expressions are unclear\n    - Provide step-by-step explanations\n    \n    Thread context:\n    {{ thread }}\n    \n    Based on the conversation thread, determine the next appropriate action:\n    \n    - If you need more information to perform a calculation, use \"request_more_information\"\n    - If you can perform a calculation, use \"calculate\" \n    - If the task is complete, use \"done_for_now\"\n    - If there's nothing to do, use \"nothing_to_do\"\n    - If you need to wait (rare), use \"await\"\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction PerformCalculation(expression: string) -> Calculation {\n  client CustomGemini\n  prompt #\"\n    You are a mathematical calculation engine. Evaluate the following expression and provide the result.\n    \n    Expression: {{ expression }}\n    \n    Rules:\n    - Support basic arithmetic: +, -, *, /\n    - Support powers: ^ or **\n    - Support square root: sqrt()\n    - Support parentheses for grouping\n    - Handle decimal numbers\n    - If the expression is invalid, set result to 0 and explain in the expression field\n    \n    Provide the calculation result and break down the operation.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction SquashResponseContext(thread: string, error: string) -> string {\n  client CustomGemini\n  prompt #\"\n    You are summarizing an error that occurred during calculation processing.\n    \n    Thread context:\n    {{ thread }}\n    \n    Error:\n    {{ error }}\n    \n    Provide a concise, user-friendly error message that explains what went wrong and suggests how to fix it.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n",
}
export const getBamlFiles = () => {
    return fileMap;
}