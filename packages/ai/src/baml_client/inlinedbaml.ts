/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

const fileMap = {
  
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\n// Using the new OpenAI Responses API for enhanced formatting\nclient<llm> CustomGPT5 {\n  provider openai-responses\n  options {\n    model \"gpt-5\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT5Mini {\n  provider openai-responses\n  retry_policy Exponential\n  options {\n    model \"gpt-5-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\n// Openai with chat completion\nclient<llm> CustomGPT5Chat {\n  provider openai\n  options {\n    model \"gpt-5\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\n// Latest Anthropic Claude 4 models\nclient<llm> CustomOpus4 {\n  provider anthropic\n  options {\n    model \"claude-opus-4-1-20250805\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet4 {\n  provider anthropic\n  options {\n    model \"claude-sonnet-4-20250514\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-5-haiku-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\nclient<llm> CustomGemini {\n  provider google-ai\n  options {\n    model \"gemini-2.5-flash\"\n    api_key env.GOOGLE_API_KEY\n  }\n}\n\nclient<llm> CustomOpenRouter {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"openai/gpt-oss-120b\"\n  }\n}\n\n// Example AWS Bedrock client (uncomment to use)\n// client<llm> CustomBedrock {\n//   provider aws-bedrock\n//   options {\n//     model \"anthropic.claude-sonnet-4-20250514-v1:0\"\n//     region \"us-east-1\"\n//     // AWS credentials are auto-detected from env vars\n//   }\n// }\n\n// Example Azure OpenAI client (uncomment to use)\n// client<llm> CustomAzure {\n//   provider azure-openai\n//   options {\n//     model \"gpt-5\"\n//     api_key env.AZURE_OPENAI_API_KEY\n//     base_url \"https://MY_RESOURCE_NAME.openai.azure.com/openai/deployments/MY_DEPLOYMENT_ID\"\n//     api_version \"2024-10-01-preview\"\n//   }\n// }\n\n// Example Vertex AI client (uncomment to use)\n// client<llm> CustomVertex {\n//   provider vertex-ai\n//   options {\n//     model \"gemini-2.5-pro\"\n//     location \"us-central1\"\n//     // Uses Google Cloud Application Default Credentials\n//   }\n// }\n\n// Example Ollama client for local models (uncomment to use)\n// client<llm> CustomOllama {\n//   provider openai-generic\n//   options {\n//     base_url \"http://localhost:11434/v1\"\n//     model \"llama4\"\n//     default_role \"user\" // Most local models prefer the user role\n//     // No API key needed for local Ollama\n//   }\n// }\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT5Mini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT5Mini, CustomGPT5]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
  "evals.baml": "test CreateBugReport {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      User: \"I found a bug in the login system. When users try to log in with special characters in their password, the system crashes with a 500 error. This happens specifically with passwords containing @ symbols.\"\n      \n      Thread: []\n    \"#\n  }\n  @@assert({{ this.intent == \"create_ticket\" }})\n  @@assert({{ this.title == \"Login system crashes with special characters in password\" }})\n  @@assert({{ \"Bug Description\" in this.body }})\n  @@assert({{ \"bug\" in this.labels }})\n}\n\ntest SearchExistingBugs {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      User: \"Are there any existing issues with the payment processing system? I want to check if someone already reported problems with credit card validation.\"\n      \n      Thread: []\n    \"#\n  }\n  @@assert({{ this.intent == \"search_github\" }})\n  @@assert({{ this.query == \"payment processing credit card validation\" }})\n  @@assert({{ this.type == \"issues\" }})\n}\n\ntest UpdateIssueTitle {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      User: \"Can you update issue #123 to have a better title? The current title 'Fix bug' is too vague. Change it to 'Fix memory leak in user session handling'.\"\n      \n      Thread: [\n        {\n          type: \"search_github\",\n          data: {\n            intent: \"search_github\",\n            query: \"memory leak\",\n            type: \"issues\",\n            filters: []\n          }\n        }\n      ]\n    \"#\n  }\n  @@assert({{ this.intent == \"update_github_issue\" }})\n  @@assert({{ this.issue_number == 123 }})\n  @@assert({{ this.title == \"Fix memory leak in user session handling\" }})\n}\n\ntest AddCommentToIssue {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      User: \"Add a comment to issue #101 saying 'I've identified the root cause. The issue is in the caching layer. I'll submit a fix by tomorrow.'\"\n      \n      Thread: [\n        {\n          type: \"search_github\",\n          data: {\n            intent: \"search_github\",\n            query: \"caching issue\",\n            type: \"issues\",\n            filters: []\n          }\n        }\n      ]\n    \"#\n  }\n  @@assert({{ this.intent == \"comment_on_issue\" }})\n  @@assert({{ this.issue_number == 101 }})\n  @@assert({{ \"root cause\" in this.comment }})\n}\n\ntest LinkIssuesBlocks {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      User: \"Link issue #202 to issue #203. Issue #202 blocks issue #203 from being completed.\"\n      \n      Thread: [\n        {\n          type: \"search_github\",\n          data: {\n            intent: \"search_github\",\n            query: \"blocking issues\",\n            type: \"issues\",\n            filters: []\n          }\n        }\n      ]\n    \"#\n  }\n  @@assert({{ this.intent == \"link_issues\" }})\n  @@assert({{ this.source_issue == 202 }})\n  @@assert({{ this.target_issue == 203 }})\n  @@assert({{ this.relationship == \"blocks\" }})\n}\n\ntest ClarificationRequest {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      User: \"I want to create a ticket for the login issue.\"\n      \n      Thread: []\n    \"#\n  }\n  @@assert({{ this.intent == \"request_more_information\" }})\n  @@assert({{ \"more details\" in this.message }})\n}\n\ntest DoneForNow {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      User: \"Thanks, that's all I needed for now.\"\n      \n      Thread: [\n        {\n          type: \"search_github\",\n          data: {\n            intent: \"search_github\",\n            query: \"completed tasks\",\n            type: \"issues\",\n            filters: []\n          }\n        }\n      ]\n    \"#\n  }\n  @@assert({{ this.intent == \"done_for_now\" }})\n  @@assert({{ \"completed\" in this.message }})\n}\n\ntest CreateFeatureRequest {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      User: \"Can we add dark mode support to the dashboard? Users have been asking for this feature and it would improve the user experience, especially for those who work late hours.\"\n      \n      Thread: []\n    \"#\n  }\n  @@assert({{ this.intent == \"create_ticket\" }})\n  @@assert({{ this.title == \"Add dark mode support to dashboard\" }})\n  @@assert({{ \"Feature Request\" in this.body }})\n  @@assert({{ \"enhancement\" in this.labels }})\n}\n\ntest SearchPullRequests {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      User: \"Show me all the recent pull requests related to database optimization. I want to see what changes have been made.\"\n      \n      Thread: []\n    \"#\n  }\n  @@assert({{ this.intent == \"search_github\" }})\n  @@assert({{ this.query == \"database optimization\" }})\n  @@assert({{ this.type == \"prs\" }})\n}\n\ntest SearchWithFilters {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      User: \"Find all open issues with the 'security' label that are related to authentication.\"\n      \n      Thread: []\n    \"#\n  }\n  @@assert({{ this.intent == \"search_github\" }})\n  @@assert({{ this.query == \"authentication\" }})\n  @@assert({{ this.type == \"issues\" }})\n  @@assert({{ \"is:open\" in this.filters }})\n  @@assert({{ \"label:security\" in this.filters }})\n}\n\ntest UpdateIssueLabels {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      User: \"Add the 'urgent' and 'backend' labels to issue #456. This is a critical database issue that needs immediate attention.\"\n      \n      Thread: [\n        {\n          type: \"search_github\",\n          data: {\n            intent: \"search_github\",\n            query: \"database issue\",\n            type: \"issues\",\n            filters: []\n          }\n        }\n      ]\n    \"#\n  }\n  @@assert({{ this.intent == \"update_github_issue\" }})\n  @@assert({{ this.issue_number == 456 }})\n  @@assert({{ \"urgent\" in this.labels }})\n  @@assert({{ \"backend\" in this.labels }})\n}\n\ntest CloseIssue {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      User: \"Close issue #789. The problem has been resolved in the latest release.\"\n      \n      Thread: [\n        {\n          type: \"search_github\",\n          data: {\n            intent: \"search_github\",\n            query: \"resolved issue\",\n            type: \"issues\",\n            filters: []\n          }\n        }\n      ]\n    \"#\n  }\n  @@assert({{ this.intent == \"update_github_issue\" }})\n  @@assert({{ this.issue_number == 789 }})\n  @@assert({{ this.state == \"closed\" }})\n}\n\ntest LinkIssuesDuplicates {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      User: \"Mark issue #304 as a duplicate of issue #305. They're describing the same problem.\"\n      \n      Thread: [\n        {\n          type: \"search_github\",\n          data: {\n            intent: \"search_github\",\n            query: \"duplicate issues\",\n            type: \"issues\",\n            filters: []\n          }\n        }\n      ]\n    \"#\n  }\n  @@assert({{ this.intent == \"link_issues\" }})\n  @@assert({{ this.source_issue == 304 }})\n  @@assert({{ this.target_issue == 305 }})\n  @@assert({{ this.relationship == \"duplicates\" }})\n}\n\ntest LinkIssuesRelates {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      User: \"Link issue #406 to issue #407. They're related but not duplicates - they're different aspects of the same feature.\"\n      \n      Thread: [\n        {\n          type: \"search_github\",\n          data: {\n            intent: \"search_github\",\n            query: \"related features\",\n            type: \"issues\",\n            filters: []\n          }\n        }\n      ]\n    \"#\n  }\n  @@assert({{ this.intent == \"link_issues\" }})\n  @@assert({{ this.source_issue == 406 }})\n  @@assert({{ this.target_issue == 407 }})\n  @@assert({{ this.relationship == \"relates_to\" }})\n}\n\ntest SearchComplexQuery {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      User: \"Find all closed pull requests from the last month that were related to performance improvements and had the 'performance' label.\"\n      \n      Thread: []\n    \"#\n  }\n  @@assert({{ this.intent == \"search_github\" }})\n  @@assert({{ this.query == \"performance improvements\" }})\n  @@assert({{ this.type == \"prs\" }})\n  @@assert({{ \"is:closed\" in this.filters }})\n  @@assert({{ \"label:performance\" in this.filters }})\n}\n\ntest UpdateMultipleFields {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      User: \"Update issue #999 with a new title 'Fix API rate limiting for external integrations', add the 'api' and 'integration' labels, and update the description to include the specific error codes we're seeing.\"\n      \n      Thread: [\n        {\n          type: \"search_github\",\n          data: {\n            intent: \"search_github\",\n            query: \"API rate limiting\",\n            type: \"issues\",\n            filters: []\n          }\n        }\n      ]\n    \"#\n  }\n  @@assert({{ this.intent == \"update_github_issue\" }})\n  @@assert({{ this.issue_number == 999 }})\n  @@assert({{ this.title == \"Fix API rate limiting for external integrations\" }})\n  @@assert({{ \"api\" in this.labels }})\n  @@assert({{ \"integration\" in this.labels }})\n}\n\ntest SearchRecentIssues {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      User: \"Show me all the issues created in the last week that are still open.\"\n      \n      Thread: []\n    \"#\n  }\n  @@assert({{ this.intent == \"search_github\" }})\n  @@assert({{ this.type == \"issues\" }})\n  @@assert({{ \"is:open\" in this.filters }})\n}\n\ntest LinkIssuesBlockedBy {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      User: \"Issue #1111 is blocked by issue #1112. The deployment can't proceed until the database migration is complete.\"\n      \n      Thread: [\n        {\n          type: \"search_github\",\n          data: {\n            intent: \"search_github\",\n            query: \"deployment database migration\",\n            type: \"issues\",\n            filters: []\n          }\n        }\n      ]\n    \"#\n  }\n  @@assert({{ this.intent == \"link_issues\" }})\n  @@assert({{ this.source_issue == 1111 }})\n  @@assert({{ this.target_issue == 1112 }})\n  @@assert({{ this.relationship == \"blocked_by\" }})\n}\n\ntest InvalidIssueNumber {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      User: \"Update issue #abc with a new title 'Fix invalid issue number handling'.\"\n      \n      Thread: []\n    \"#\n  }\n  @@assert({{ this.intent == \"request_more_information\" }})\n  @@assert({{ \"valid issue number\" in this.message }})\n}\n\ntest AmbiguousSearch {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      User: \"Find the bug.\"\n      \n      Thread: []\n    \"#\n  }\n  @@assert({{ this.intent == \"request_more_information\" }})\n  @@assert({{ \"more specific details\" in this.message }})\n}\n\ntest MultipleOperations {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      User: \"I need to: 1) Search for all open issues with 'bug' label, 2) Update issue #123 with 'urgent' label, 3) Add a comment to issue #456, and 4) Link issue #789 to issue #101 as duplicates.\"\n      \n      Thread: []\n    \"#\n  }\n  @@assert({{ this.intent == \"search_github\" }})\n  @@assert({{ this.type == \"issues\" }})\n  @@assert({{ \"is:open\" in this.filters }})\n  @@assert({{ \"label:bug\" in this.filters }})\n}\n\ntest EmptySearch {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      User: \"Search for issues.\"\n      \n      Thread: []\n    \"#\n  }\n  @@assert({{ this.intent == \"search_github\" }})\n  @@assert({{ this.type == \"issues\" }})\n}\n\ntest VeryLongComment {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      User: \"Add this comment to issue #555: 'This is a very detailed analysis of the problem. The issue occurs when users attempt to upload files larger than 10MB through the web interface. The error manifests as a timeout after 30 seconds, but the actual problem is in the file validation logic. The validation function is checking the file size before the upload completes, which causes a race condition. Additionally, the error handling is not properly catching the specific exception thrown by the file system when the disk space is insufficient. This needs to be fixed by: 1) Moving the file size check to after the upload completes, 2) Adding proper disk space validation, 3) Implementing proper error handling for file system exceptions, and 4) Adding progress indicators for large file uploads.'\"\n      \n      Thread: [\n        {\n          type: \"search_github\",\n          data: {\n            intent: \"search_github\",\n            query: \"file upload timeout\",\n            type: \"issues\",\n            filters: []\n          }\n        }\n      ]\n    \"#\n  }\n  @@assert({{ this.intent == \"comment_on_issue\" }})\n  @@assert({{ this.issue_number == 555 }})\n  @@assert({{ \"detailed analysis\" in this.comment }})\n}\n\ntest NothingToDo {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      User: \"Hello, how are you?\"\n      \n      Thread: []\n    \"#\n  }\n  @@assert({{ this.intent == \"nothing_to_do\" }})\n  @@assert({{ \"Hello\" in this.message }})\n}",
  "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"typescript/react\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../src/\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.211.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
  "orchestrator.baml": "class Calculation {\n  operation string\n  operands float[]\n  result float\n  expression string\n}\n\nclass IntentCalculate {\n  intent \"calculate\"\n  expression string\n  explanation string\n}\n\nclass ClarificationRequest {\n  intent \"request_more_information\"\n  message string\n}\n\nclass DoneForNow {\n  intent \"done_for_now\"\n  message string\n}\n\nclass NothingToDo {\n  intent \"nothing_to_do\"\n  message string\n}\n\nclass Await {\n  intent \"await\"\n  seconds int\n  reasoning string\n}\n\nclass IntentCreateTicket {\n  intent \"create_ticket\"\n  title string\n  body string\n  labels string[]\n}\n\nclass IntentSearchGitHub {\n  intent \"search_github\"\n  query string @description(#\"\n    The search terms to use to search for issues or pull requests on GitHub.\n  \"#)\n  type \"issues\" | \"prs\" @description(#\"\n    The type of items to search for - either \"issues\" or \"prs\" (pull requests).\n  \"#)\n  filters string[] @description(#\"\n    Additional filters like \"is:open\", \"label:bug\", etc. May be empty.\n  \"#)\n}\n\nclass IntentUpdateGitHubIssue {\n  intent \"update_github_issue\"\n  issue_number int @description(#\"\n    The number of the issue to update.\n  \"#)\n  title string? @description(#\"\n    New title for the issue. Optional.\n  \"#)\n  body string? @description(#\"\n    New description/body for the issue. Optional.\n  \"#)\n  labels string[]? @description(#\"\n    New labels array for the issue. Optional.\n  \"#)\n  state \"open\" | \"closed\"? @description(#\"\n    New state for the issue - either \"open\" or \"closed\". Optional.\n  \"#)\n}\n\nclass IntentCommentOnIssue {\n  intent \"comment_on_issue\"\n  issue_number int @description(#\"\n    The number of the issue to add a comment to.\n  \"#)\n  comment string @description(#\"\n    The comment text to add to the issue.\n  \"#)\n}\n\nclass IntentLinkIssues {\n  intent \"link_issues\"\n  source_issue int @description(#\"\n    The issue number that is the source of the relationship.\n  \"#)\n  target_issue int @description(#\"\n    The issue number that is the target of the relationship.\n  \"#)\n  relationship \"blocks\" | \"blocked_by\" | \"relates_to\" | \"duplicates\" @description(#\"\n    The type of relationship between the issues.\n  \"#)\n}\n\nfunction DetermineNextStep(thread: string) -> ClarificationRequest | DoneForNow | NothingToDo | Await | IntentCreateTicket | IntentSearchGitHub | IntentUpdateGitHubIssue | IntentCommentOnIssue | IntentLinkIssues {\n  client CustomOpenRouter\n  prompt #\"\n    You are a helpful assistant that can:\n    - Create GitHub issues when users ask to file tickets/issues/bugs/features\n    - Search GitHub issues and pull requests to find existing items\n    - Update GitHub issues (title, body, labels, state)\n    - Comment on GitHub issues\n    - Link GitHub issues with relationships\n    - Ask for clarification when details are unclear\n\n    Thread context:\n    {{ thread }}\n\n    Based on the conversation thread, determine the next appropriate action:\n\n    - If the user wants to create a ticket/issue/bug/feature, use \"create_ticket\"\n    - If the user wants to search for existing issues/PRs, use \"search_github\"\n    - If the user wants to update an existing issue, use \"update_github_issue\"\n    - If the user wants to add a comment to an issue, use \"comment_on_issue\"\n    - If the user wants to link two issues, use \"link_issues\"\n    - If the task is complete, use \"done_for_now\"\n    - If there's nothing to do, use \"nothing_to_do\"\n    - If you need to wait (rare), use \"await\"\n\n    Note: All GitHub operations work on the configured repository. Tickets and mutations require human approval.\n\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction SquashResponseContext(thread: string, error: string) -> string {\n  client CustomOpenRouter\n  prompt #\"\n    You are summarizing an error that occurred during calculation processing.\n    \n    Thread context:\n    {{ thread }}\n    \n    Error:\n    {{ error }}\n    \n    Provide a concise, user-friendly error message that explains what went wrong and suggests how to fix it.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n",
}
export const getBamlFiles = () => {
    return fileMap;
}