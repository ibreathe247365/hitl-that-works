/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Audio, Image, Pdf, Video } from "@boundaryml/baml"
import type * as types from "./types";
import type {
	Await,
	Calculation,
	Check,
	Checked,
	ClarificationRequest,
	DoneForNow,
	IntentCalculate,
	IntentCommentOnIssue,
	IntentCreateTicket,
	IntentLinkIssues,
	IntentSearchGitHub,
	IntentUpdateGitHubIssue,
	NothingToDo,
} from "./types";

/******************************************************************************
 *
 *  These types are used for streaming, for when an instance of a type
 *  is still being built up and any of its fields is not yet fully available.
 *
 ******************************************************************************/

export interface StreamState<T> {
	value: T;
	state: "Pending" | "Incomplete" | "Complete";
}

export namespace partial_types {
	export interface Await {
		intent?: "await" | null;
		seconds?: number | null;
		reasoning?: string | null;
	}
	export interface Calculation {
		operation?: string | null;
		operands: number[];
		result?: number | null;
		expression?: string | null;
	}
	export interface ClarificationRequest {
		intent?: "request_more_information" | null;
		message?: string | null;
	}
	export interface DoneForNow {
		intent?: "done_for_now" | null;
		message?: string | null;
	}
	export interface IntentCalculate {
		intent?: "calculate" | null;
		expression?: string | null;
		explanation?: string | null;
	}
	export interface IntentCommentOnIssue {
		intent?: "comment_on_issue" | null;
		issue_number?: number | null;
		comment?: string | null;
	}
	export interface IntentCreateTicket {
		intent?: "create_ticket" | null;
		title?: string | null;
		body?: string | null;
		labels: string[];
	}
	export interface IntentLinkIssues {
		intent?: "link_issues" | null;
		source_issue?: number | null;
		target_issue?: number | null;
		relationship?: "blocks" | "blocked_by" | "relates_to" | "duplicates" | null;
	}
	export interface IntentSearchGitHub {
		intent?: "search_github" | null;
		query?: string | null;
		type?: "issues" | "prs" | null;
		filters: string[];
	}
	export interface IntentUpdateGitHubIssue {
		intent?: "update_github_issue" | null;
		issue_number?: number | null;
		title?: string | null;
		body?: string | null;
		labels?: string[] | null;
		state?: "open" | "closed" | null;
	}
	export interface NothingToDo {
		intent?: "nothing_to_do" | null;
		message?: string | null;
	}
}
