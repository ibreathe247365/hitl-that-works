/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

'use server'

import type { Audio, Image, Pdf, Video } from "@boundaryml/baml";
import { b } from "../index";
import type * as types from "../types";
import type {
	Await,
	Calculation,
	Check,
	Checked,
	ClarificationRequest,
	DoneForNow,
	IntentCalculate,
	NothingToDo,
} from "../types";

/**
 * Streaming BAML server actions that return ReadableStreams.
 */

/**
 * Executes the streaming variant of the "DetermineNextStep" BAML action.
 *
 * This action initiates a streaming response by calling the corresponding
 * BAML stream function. The returned stream yields incremental updates.
 *
 * @param { string } thread - Input parameter.
 *
 * @returns {ReadableStream<Uint8Array>} A stream that yields incremental updates from the action.
 */
export const DetermineNextStep = async (
	thread: string,
): Promise<ReadableStream<Uint8Array>> => {
	const stream = b.stream.DetermineNextStep(thread);
	return Promise.resolve(stream.toStreamable());
};

/**
 * Executes the streaming variant of the "PerformCalculation" BAML action.
 *
 * This action initiates a streaming response by calling the corresponding
 * BAML stream function. The returned stream yields incremental updates.
 *
 * @param { string } expression - Input parameter.
 *
 * @returns {ReadableStream<Uint8Array>} A stream that yields incremental updates from the action.
 */
export const PerformCalculation = async (
	expression: string,
): Promise<ReadableStream<Uint8Array>> => {
	const stream = b.stream.PerformCalculation(expression);
	return Promise.resolve(stream.toStreamable());
};

/**
 * Executes the streaming variant of the "SquashResponseContext" BAML action.
 *
 * This action initiates a streaming response by calling the corresponding
 * BAML stream function. The returned stream yields incremental updates.
 *
 * @param { string } thread - Input parameter.
 * @param { string } error - Input parameter.
 *
 * @returns {ReadableStream<Uint8Array>} A stream that yields incremental updates from the action.
 */
export const SquashResponseContext = async (
	thread: string,
	error: string,
): Promise<ReadableStream<Uint8Array>> => {
	const stream = b.stream.SquashResponseContext(thread, error);
	return Promise.resolve(stream.toStreamable());
};
